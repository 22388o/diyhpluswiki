Future of privacy coins

Brandon Goodell, Andrew Poelstra, Alexandra Moxin

AM: That's not good. Hi everyone. Thanks for coming to the future of privacy coins panel. I want to spend a minute talking ablout backgrounds and interest in this area.

BG: I have a PhD in something. I got into monero a couple of years ago. I needed to pay rent, so I did some work in math in exchange for money.

AP: I work on confidential transactions and scriptless scripts and I do not have a PhD.

AM: What do you think about taproot and schnorr signatures?

AP: Sure. There was a new proposal posted to the bitcoin-dev mailing list for taproot and tapscript, which is something that myself and Greg Maxwell and ajtowns and jl2012 have been working on for a little over a year now. This helps you hide bitcoin scripts inside of public keys. The motivation is the realization that a few of us had a few years ago that in common applications of bitcoin script like claim-refund constructions, typically you have a number of parties that are interested in making sure coins move depending on some condition or some contract. If everyone agrees that those conditions are met, they can sign and move the coins. We have this blockchain scripting language called bitcoin script designed to enforce these conditions. But realistically, if everyone agrees, then they can just sign off on it. So taproot lets you replace your bitcoin script with a public key that perhaps multiple people contributed to and need to sign for. The idea is that in the non-cooperative case, you can say there's an alternate scale and reveal the preimage to a hash or something. You can reveal a script with those conditions and then you can prove that your original public key committed to that script so you're not just making up a script after the fact. In the cooperative case, you never reveal the script. In the uncooperative script, the script is still there on the blockchain and can be revealed when you need it. The consequences for privacy is that as long as people are doing complex things like atomic swaps or lightning or whatever, the resulting transactions will be indistinguishable from single-signature individual transactions.

AM: Peter Todd spoke earlier about zcash and trusted setup. What are your thoughts on that and on zcash in general?

BG: My thoughts on zcash are complicated. I do firmly believe that the folks who are working on zcash are trying to make the world a better place and they do want to remove trusted third parties from finance. I don't believe in the idea of becoming a trusted third party in order to do that. I personally have a real hard time trusting trusted setups. In monero, we want to avoid trusted setups to avoid what petertodd was talking about-- in the end, you're still trusting on petertodd that he really drove across Canada instead of just using photoshop or whatever. Are all the participants trustworthy? I'm not so sure. The way zcash has handled recent issues, like the deleted transcript, I have complex feelings about this. The math behind zcash is really cool, though.

AP: I am also against trusted setups in general. Zcash foundation is distinct from the Zcash corporation. There's a few specific points on petertodd's talk that I want to talk about. I agree with all the specifics about this being a real, hard difficult thing. But it's hard to fix the things he brought up. It would have been nice if he could have done the trusted setup in the woods without any internet connection. To do this, you would have to drive back and forth between cell service areas and non-service areas. The best you can do is some computation. That's unfortunate. The second thing he talked about was the discussion about deterministic software builds. At an ecosystem level, we're slowly getting better at that. It's not yet at the point where it needs to be. I hope that people realize that deterministic builds are a really serious issue and we desperately need that for cryptocurrency and cryptography software.

AM: What are your thoughts on zero-knowledge proofs and their use cases?

BG: Zero-knowledge proofs are the word 'synergy' from 1972 transported decades into the future. Everyone talks about wrapping things up as a zero-knowledge proof. It's an interesting thing. Black holes leak information about the contents on them, but the idea that cryptography is different from black holes, is all under certain theoretical assumptions like you're in a closed system and there's no metadata being leaked or anything along those lines. Assuming the availability of metadata, you can link things together. Monero blockchain has metadata about the zcash blockchain, and vice versa. I can use information from zcash blockchain to try to link monero data. Any time you have two anonymized data sets and you bring them together, they are not necessarily anonymous anymore. The idea of having zero-knowledge statements without revealing any of the contents, I think this is a very theoretical topic in computer science.

AP: I disagree with all of that. Zero-knowledge proofs are kind of a buzzword, yes. They have been around since the 80s and 90s. A zero-knowledge proof is a mathematical object that somehow demonstrates some statement is true without revealing anything else that the statement is true. There's ring signatures in Monero which are actually zero knowledge proofs that some key image you attach to a transaction correspond to some specific.... so the zero-knowledge property hides which key was involved, but there's the risk of using the same key twice. When people talk about zero-knowledge proofs today, they are usually referring to very general zero-knowledge proofs, not about some specific statement that is chosen to achieve some goal with a minimum of efficiency, but instead we have some arbitrary program that you might describe arbitrarily, and you might execute the program and if it's accepted or it returns true or whatever your accept condition is -- perhaps it's bitcoin script or something-- and it's a zero-knowledge proof that it was accepted, without giving any information about what the program is in some cases. Zero-knowledge proofs, for them to be practical, wasn't a thing until a 2015 paper "SNARKs for C" which was a computational proof for a subset of the C programming language that will let you generate zero-knowledge proofs which were slow to generate, slow to verify and had a trusted setup. We got from intractable to inefficient in 2013 or 2015. Since then, we have seen leaps and bounds in terms of representing programs to make them more efficient in zero-knowledge schemes and also methods of making zero-knowledge schemes more efficient. There's also exciting development in replacing trusted setup with something that doesn't have trusted setup. This is stuff like STARKs by Eli Ben-Sasson. I'm excited to see all of that moving forward.

AM: Why is the ability to obscure data important?

AP: When you talk about obscuring data in a blockchain context, we're talking about not publishing that data permanently to the entire world. So let me rephrase the question. Why is it important to not publish all of your data to the entire world? The answer might be intuitive but let me explicitly state that. If you are a business in financial technology, you cannot reveal your orderbooks or your internal accounting. If you are an ordinary person, you cannot reveal what you're buying. You don't want to reveal to your landlord what your income is. You don't want to reveal to your church that you're buying birth control or voting democrat. In some cases, there are serious consequences. In some cases, you don't want to reveal to your government that you are doing certain things. When we develop privacy technologies for cryptocurrencies, we're not just trying to hide data and obscure and prevent anyone from seeing what ew're doing. What we're trying to do is preventing everyone from seeing what we're doing, and this is necessary for running a society. ((applause))

BG: I absolutely agree. I think something that people forget is the history of cryptography is steeming in.... back in world war 1 and 2, being able to pass messages secretly were how those wars were fought. They were fought with bullets too, but the history of cryptography is a history of an arms race. For all the reasons Andrew mentioned, if we aren't constantly battling against forces like Facebook that want to unmask us forever for all data, they want to exploit your psychology, you're actually engaged in a form of information warfare. People tend to forget that cryptography is not really a game. People's lives are on the lane. When you have people in Venezuela experiencing 10,000% inflation daily, they need to buy food and pay rent. If they go to buy bitcoin transparently, they are putting themselves in danger and there are lives on the line. I absolutely agree with what Andrew just said.

AM: What are some of the downsides of hiding data?

BG: I guess I'll start. Facebook can't .... we all know about the tradeoff between security and convenience. There are password vaults on our phones, but at least you don't have to memorize 75 passwords and chain code regularly. But then some people don't have security vaults for their passwords, and they just append digits to the same passwords they have been using since 1992. When you talk about the downsides of security, there's the downside of convenience. There's a dirty part of me that wants facebook to advertise to me, because they know I like bonsai trees and I want those advertisements. But if I do that, I sacrifice all of my ability to act as a private individual. So there's a tradeoff.

AP: Something that is not a downside, and often regulators don't see this--- this is the idea that if we had information privacy, and if people were able to transact privately, then they would be unable to meet reporting or auditing requirements that they are required to have. But this isn't true. What about proving that a contract does what you say? We want to be able to control the explosion of data and not broadcast it to the entire world, like credit card transactions to your credit card company and advertisers and so forth. We want to ensure the information goes only to the people that neeed it. The second side of this is that a lot of the knowledge into general purpose zero-knowledge proofs involves describing programs in a way that can be understood in a zero-knowledge proof system, in a way that makes it possible to verify and do formal analysis of computer programs. If you have a smart contract that somehow uses computer code to encode data from financial derivatives, you could run that code through an analysis system to actually prove to you that it will not have certain adverse effects. In general, that is extremely difficult to do for an arbitrary program. But there are certain ways to construct programs that make formal verification easier. We're improving privacy, but also improving assurance that information is flowing in ways that they should be in order to run a free society.

BG: There's also our right to know what people know about us. Unless I file a freedom of information request, I am not necessarily going to know what the NSA has on me. Maybe they have nothing. I hope they have nothing. But we should also be able to know what other people know about us, and we should be able to provide consent over our data being handed out to other people.

AP: When you send a FOIA request to the NSA, they do a lot of manual work shifting thorugh their trillions of documents to find something relevant to you that doesn't have national security concerns. The reason you have to file a FOIA instead of this happening automatically, is that they are unable to do this for every possible request you make. We can hope tha twith the advent of zero-knowledge compute tech and verifyability then it should not be a problem, and we should push legislation that the NSA should not be storing all this data and they shouldn't know what this story.

AM: Can you explain monero's PoW algorithm and how it is different from bitcoin's sha256d algorithm?

BG: The ring signatures don't have much to do with PoW in Monero. The history behind Monero is starting with Cryptonote. There's AES encryuption, it XORs the result, encrypts it again, it does Merkle-Damgard. The idea was to take out as much of the L3 cache as possible. It's a slow part of the memory system. This way, ASICs wouldn't be able to do the mining on Kryptonite unless they had huge memory capacity. This was in pursuit of ASIC resistance, and perhaps as we all know, about a year ago we changed our PoW algorithm and we saw a 80% drop in our hashrate. There were monero ASICs. I believe that we hav eanother change since then and we saw another 80% drop. There was only about a six month delay. So ASICs manufacturer were able to completely make up for their losses within 6 months. Depending on who you speak with, they can roll out ASICs in 30 days. Kryptonite is an interesting weird animal.

AP: Do you want to talk about the original cryptonote implementation?

BG: The original cryptonote implementation had like all of its comments stripped out, on purpose.

AP: Deep in monero's history, monero was a fork of a cryptocurrency called bytecoin which developed ring signatures but didn't have confidential transactions back then. It didn't have twice as efficient ring signatures. But this was a first demonstration of the ring signature technology for privacy. It was very interesting that it was a genuine technical innovation. It was released with a whitepaper with a forged timestamp on it, claiming it was 2 years younger than it was. It had an obscure mining algorithm on it. It claimed to use sha3 but it used an alternate pre-standardization version of sha3 that nobody knew about, and it's frustrating to work with monero. The mining algorithm was supposedly ASIC resistant. There were lots of loops in the reference code, it had goto statements, there were no comments, there were like 3 comments in the entire codebase- they were in Russian and not helpful. After it was revealed and it became more popular, it was discovered that they stripped out a whole lot of those loops and it was possible to mine Monero like 100x faster. So it's not really any hard evidence of what was going on here. The original people behind it were pseudonymous and nobody knows who they were. It appears they deliberately devised the scheme so that they could mine bytecoin much faster than the general public could. Monero took the bytecoin code and said we're going to drop all your weird secret scams or whatever, and we're going to clean of our hands of that.

BG: Bytecoin had like 2 years of fake blockchain. They said people have been using this on the darknet market forever already, so therefore it's worth something. Scarcity had nothing to do with the market value of this coin. It was being run by a manipulated market. Bytecoin's history is the stuff of movies. I can't wait for the first movies to be released, like speculative fictional movies about who built bytecoin. This is going to be more interesting than the speculative movies about Satoshi Nakamoto.

AP: There was at least one cryptographer in there. This happened- bytecoin continued running for quite a while, and that's still a thing I believe. It's very strange. It's a very strange world we live in where anonymous people can develop new technology and deploy it and continuously use it for their scams without any indication of who they are.

AP: Lightning today... on lightning, you have this primitive with a payment channel where you have two parties moving money between each other, they use a claim refund construction to make sure you can get your coins back. They sign some transactions, some of the coins go to the first party and some go to the second party. When they make a payment, they sign a replacement transaction. They keep doing this, over and over and over. The lightning network is a way to link these payment channels and make them talk to each other. They use HTLCs to do multi-hop lightning network things.


