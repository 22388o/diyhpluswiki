Lightning network security panel

Olaoluwa Osuntokun, Justin Camarena, Matt Corallo, Michael Folkson

MF: I will start by thanking Kevin and the organizers. It's been an awesome event. Thakn you to the sponsors. SWithout them we wouldn't have the event. I have a few points. I run the London Bitcoin developers group. If you're ever in London or interested in speaking, please lookup londonbitcoindevs on twitter or reddit. There's a few being setup in boston and a few others around the world. Check those out. If you're interested in setting up a meetup, please contact me and I would be happy to help out. Also, John Newbery is doing amazing work in terms of encouraging people to contribute to Bitcoin Core. If you haven't contributed before, there's an IRC group every Wednesday where jnewbery will answer any of your questions and help you get started out. That's an awesome initiative.

roasbeef: My name is laolu or roasbeef. I am CTO at Lightning Labs. I work on protocol stuff and impleemntation and some other hats are worn too.

JC: We were the first one to offer lightning in merchant ecommerce.

MC: I've been doing protocol design work since bitcoin 2012 ish. I also have a lightning library for existing wallets to integrate lightning wallet, which have onchain state handling implemented already. This library does the lightning-specific work for them but they still get to use the othe rstuff they already have.

MF: We're still very early on lightning development right now. It's hard to judge it by the same yardsticks that we would bitcoin. Lightning is like 3 years old?

roasbeef: It's like 1 year old on mainnet right now.

MF: Laolu, what is your view of the security of lnd as an implementation?

OO: It's pretty good. It's getting better every day. We have a lot of users giving us feedback. Every now and we discover things on the protocol level like different ways of doing probing or holes we hadn't considered. ew've been focusing on security measures like seed backup, channel backups, watchtowers, we're focusing on making sure things are secure and robust and so that people can feel more confident in the software for their use.

MF: Bryan did you get that? It's a miracle how he does that. Justin, you've been building on top of lnd. What has been your experience of building on top of lnd? Obviously lnd offers so much out of the gate but what are the challenges?

JC: I've been testing out lnd for a long time. I have experience working with it. We're aware of the risks using it. One of the challenges was keeping all of the money in hot wallets online. Payments are made and we have this balance we can't get rid of. We could close the channels, but it's basically a growing hot wallet. API wise, it's been getting better and better. A lot of things we didn't know would be a problem, we've learned things by testing on mainnet with real users.

MC: What problems?

JC: Originally we liked lightning because we wanted to get away from on-chain problems like as a merchant if you have incoming payments often from users around the world, you have many of them sending partial payments or overpaying or sending you too much money. With lightning, we hoped it would make the experience better and that incoming payments wouldn't be underpaid. I think overpayment is a feature and it doesn't happen that often, except with c-lightning.

MF: Matt, you've taken a different approach with rust-lightning. It's not doing the same thing that lnd is doing. You're figuring out a niche to operate in. When you observe lnd, as a prolific Core contributor, what are your thoughts on how it has evolved and would you have done it differently?

MC: There's two parts of that question. The first just being, yeah obviously I think they have been doing great work and that c-lightning, eclair and others have done great work among others. There's no help in me trying to compete with that just redundant wasteful effort. So as you mentioned, I was trying to find a niche that is useful for peopl ewho want to run their entire wallet on a machine that is only connected to the world on a serial cable no internet access required you could build something reasonably well maybe pseudo-internet connectivity but maybe not an IP stack like TCP/IP over that serial port. Your critical machine should be able to be somewhat offline. You can do more flexible things around how you do watchtowers. You might send encoded watchtower blobs to multiple watchtowers and get those watchtowers to agree they have seen this update before moving on, so you can distribute your security model a little bit there but that's obviously a lot more work on the user end, not an average user more like a developer user. lnd is not targeting a hardcore developer that wants to integrate it into their app and do a bunch of work themselves and very micromanaging exactly how data is stored and all those things. rust-bitcoin lets you do the micromanagement. The other angle of rust-lightning is that because of the library we've been able to do cool work with automated fuzzing and trying to analyze the state machines in automatic fuzz testing style ways where you throw garbage at the state machine and see if it is able to maintain state with the peer and do all sorts of weird things with your peers with something that is much harder to test with other implementations. That's been fun and interesting. I think oother things will get there eventually, and at the same time I don't have to worry about users and I odn't have support tickets and so on, which gives me time to work on other things.

MF: Matt is looking at existing bitcoin wallets integrating lightning into their existing wallets. Is that a possibility with lnd? Or is rust-lightning a better place for existing wallets?

OO: With rust-lightning, it's designed for that purpose. It's possible with lnd but there's a few things- you have signing, getting blocks, getting notifications. You can abstract those things out, but maybe they should be different processes like the signing calling something else in another process. It's not designed to be integrated with other wallets, but rather it controls a wallet itself. It's more batteries included. We do see some people building wallets on top of lnd. There's more mobile wallets now than there were before because it gives you an easy jump start. If you had a use case for signing, you could more carefully architect it with rust-bitcoin but with lnd you inherit my design decisions. It's batteries included, it has RPC, it's everything we have. You could break out some of the pieces and mix-match on your own I guess, and choose your own lightning node that plugs in together. It's cool that it can work both ways.

MF: I feel like I should give Bryan at least 3 seconds.

BB: No, we're good.

MF: Are you monitoring the other implementations or just one?

JC: Originally, when I was implementing it before it went on mainnet, the one that was ahead at the time was lnd. I went with that first. I didn't bother looking at the other implementations really, I did look but didn't go with them. So I went with lnd. After a few months and now years of running it, there were a bunch of bugs on API handling. It was really useful to have the lnd team on slack where I could message them at midnight and force them to fix bugs. That's my style of working with lnd.

MF: Matt, lightning is a layer 2 system rather than a layer 1. So there can be a faster pace of development even though you don't necessarily want to go completely crazy foregoing review or losing funds or something. What insights do you have from a Bitcoin Core perspective-- do you think it's moving too fast? Should there be more review? Is lnd sufficiently stable?

MC: I don't have as much experience running lnd as Justin does to answer the specific stability question. But obviously, all of the layer 2 systems that we have today and all the proposals we have for reasonably sane layer 2 systems have this property that we have taken the censorship resistance assumption in bitcoin land that is a weak assumption about usability so if you lose censorship resistance temporarily or period, then this is a usability issue but you don't generally lose funds, but now it is a fundamental security assumption where if you can't get a justice transaction on the chain fast enough then you lose money which is fundamental to lightning and most other layer 2 proposals as well that aren't super centralized. It's a different world, and still something-- the biggest question about lightning security is in that domain, well bitcoin is still an experiment we don't know how decentralization or censorship resistance is going to work out in the long run. So while it's important to scalability that we look at these things and try to utilize them in building layer 2 systems, we don't really have any better ideas, it's still kind of a big open question in the long-run. In terms of the pace of lightning development.... I think the protocol is actually moving not that quickly. Certainly more quickly than bitcoin consensus rules. But reasonable when you compare it to other more flexible protocols that have lots of users and can be changed freely because you have upgradeability on a per connection or peer basis. It's more comparable to the pace of work on p2p logic in Bitcoin Core where new messages and protocols are added at a similar pace as you see in lightning because you have similar constraints like peer negotiation and it doesn't have to be the same as all your peers. It's similar, and there's fast paced development on the clients just because they are new and users flooding in with adoption and you see a lot of bugfixes and tweaks and fast development but that's to be expected for relatively new projects.

OO: Lightning can be more nimble than bitcoin development. There's the principle where you add new features and not really modify the core network itself. People talk about these features like sending a payment with an invoice, like key-send now, that can be done on the lightning network right now without anyone else upgrading. It adds a lot more flexibility for developers. We're excited about this because we can just implement this as long as we know the client and the receiver. We can think new ideas and implement them really quickly. An example of upgrading the network is moving to dlog-based HTLCs instead of the hash-based one because the hash-based one has the same identifier throughout the entire route and you can identify the route if you have two intermediate nodes. The dlog one would require a hard-fork I guess because all of those nodes would be requiring that or something. It's cool we have a bunch of ways we have to upgrade the network in the future. Because it's not centralized, we can't force upgrades but hopefully some people are trying out some of the new features.

MF: So you can get new features out the door really quickly. So that's a positive benefit of the fast pace of development. Do we want to discuss rust vs golang on stage? Or is that too much controversy?

MC: I don't know if I'm awake enough for religious debates right now.

OO: Okay, we're cool. Let's not go into that.

MF: Okay, you heard it here first. Golang is the language for lightning.

JC: I've looked at the other implementations- well not rust-lightning because it's not a node-- but eclair for example. One of the things we did was with turbochannels-- in a custodial context, we're able to setup a prefunded channel to a user and they are able to use lightning easily when the transaction is confirmed. I don't have to modify the network at all, it's between me and the other node. Another example is raising the channel size limit. We removed the limit, and any other node that wants to fund a bigger channel can do that with us. ACINQ did this with us, I think it was a 2 BTC channel.

OO: There's a limit on the lightning network right now, and you can just lift the limit if you want.

MF: That's the individual implementations covered. But what about a network level in terms of multiple implementations. cdecker has a github repo where he tests compatibility. Do any of you have views on the state of the lightning network in terms of cross-implementations?

OO: Those test saren't fully encompassing, but that was just to ensure we could actually send payments. We've since discovered a bunch of quirks. We have not had close development with them but we do some cross-testing like this once in a while. We're definitely wanting to work on this. The cool thing about this is that you can have tarmigan based in Japan they were able to use those to have some rough certainty that things were partially compatible. I think we could do more with like fuzz testing like Matt said, to make sure your implementation can do the happy path and won't just crash if it gets random data. I think we'll investigate it more in the future. It's not just lnd-lnd, it's a big network and other software is out there. Otherwise you will have network segmentation and it won't be connected there.

MC: Fuzz testing isn't just for crashing. Rust-lightning has been doing protocol-level fuzztesting where the input from the fuzzer is used as a list of command to send payments, disconnect nodes, reorder messages, things you would only see if you had very strange internet behavior like during multipath. This exists, it's not common, but you can poke at a lot of these edge cases to really test the state machines and really test the behavior of the nodes. Do you read over a buffer when you deserialize something, things like that. I'd like to integrate other nodes into that, but it's hard to take free standing daemons that aren't libraries... maybe eclair will help wit hthat.

JC: In my experience, running a node on mainnet and having 100s of channels. There's some privacy loss with 1000s of channels. Originally the nodes wouldn't stay connected on mainnet, it was some force-closures and things, it was a huge stream of issues being reported to the different teams but it's getting better.

MF: Obviously we've had discussion for years about whether multiple implementations on bitcoin are good, and in lightning let's ask the same question.

MC: Worst case, you fall out of consensus and everyone loses a lot of money.

OO: Yeah the risks are different. If you mess up, close the channel. We know we have this base that we can fall back to.

MF: Let's move on to end user security, like watchtowers and static channel backups. Anyone want to talk about the current state and ideal future state?

OO: Lightning wallets are hard because you have additional state. In bitcoin you have state like a seed and then you can recover UTXOs. But in lightning, if your state is out of date you can accidentally cause a breach. So we developed the channel backup concept so that you have the necessary information to close out the channel state fiarly if something goes wrong. It's something that lets you reconstruct the channel and go to the other party and close it out. It's a seed in a special file that is updated only when you open and close a channel. Between users, channels are pretty stable. Closing a channel is a pretty bad thing. Lots of users wnat to keep those open. In watchtowers, those were developed- like early versions back in the day by Tadge- but bitconner and I are developing a version too. This is pretty good for incentives and it's a disincentive for doing any funny business; you don't know how many towers are out there. It's an additional level of deterrence. We've seen some breaches on chain because of something, but it doesn't seem to be targeted. Maybe watchtowers are a nuclear weapon here.

MC: Also, relatively small amounts in lightning right now. It's still too early to put lots and lots of money in lightning. Bugs have been seen. There's some questions about the spec not being there yet about fee estimation. If someone breaches, it's hard to punish them in the current design. These are all resolvable issues. It's still early, you just wouldn't expect to see large-scale exploitation.

OO: We have a lot of code that we have tested and evaluated, but ideally the code is there as a deterrence. Hey we have the code don't do anything funny...  it's good to have that code there and sleep at night because we wrote it and tested it and we can catch some people cheating which is definitely good.

MF: What about increasing the limits on the payment channels?

OO: Do I think it's premature? The supply of capital in the network responds to the demand. I feel like it makes sense today for companies that are doing transactions between each other often makes sense for more capital in the channel. In the future maybe also for exchanges. People are able to do this today because there's no global consensus anyway.

JC: It works just fine, it hasn't been an issue. Eclair has been opening many channels; instead of having to open lots of channels, you can open just one instead.

MC: When you really know your counterparty.... if they really try to steal your money, you can sue them. There's a fallback.

MF: Have you seen the watchtowers at bitrefill?

JC: I don't thin kany of those are production-ready. I think lnd has a pull request. I sleep better now that we have static channel backups. I sleep better at night, regarding our hot wallets.

MF: What about hardware wallets for lightning? It's a difficult problem. I don't know if you have spent much time looking at how hardware wallets would integrate with lnd. Is it too early?

OO: That was a great presentation earlier. The main difference between lightning and regular hardware wallets is that it has to be more intelligent. Like the wallet only signs when a payment is increasing balance, and also only sign for incoming not outgoing payments. An exchange could do this and make sure that any outgoing payment is only initiated by a user from the exchange. Another interesting example is topology where you have a main node that has public channels on the network and maybe another node with more funds that is isolated from the rest of the network. Hardware wallet is super interesting, it's very cool research, we don't currently have plans to look at this. Watchtowers and hardware verification as well adds to the safety and security of the system. Hardware wallets can definitely increase the value that is safe to have on channels on the network.

MC: Supporting hardware wallets is ann't an explicit goal of rust-bitcoin. It's a different from the c-lightning HSMd and a lot of the existing research.... the model is tricky. There are a lot of issues of just trying to enforce rules on the hardware wallet agains tthe lightning implementation running on the machine. If you have two different channels with different dust limits, which is totally reasonable like if you have counterparties with different fee estimations, you might not be able to forward payments anymore or get your money drained if you disable that on your hardware wallet. Or maybe you broadcast a transaction because you think something is about to timeout, and that's only because you haven't received the latest block, which causes you to lose money. The rust-lightning approach is a little different. Instead, the idea is to move all the complexity into the hardware wallet- which is not feasible with today's hardware wallets which have absolutely tiny CPUs and only 128kb of RAM. Instead, put 5 MB in your hardware wallet, run the whole lnd daemon there, and pass the whole messages off the computer and then send them upstream and do the routing on the computer- don't put routing table on the hardware wallet-- and then for watchtowers, which you have to have to have security, you would have the hardware wallet have a list of trusted watchtowers and it would send watchtower to them via your potentially compromised machine and it waits for the watchtower to sign back a message saying yes received until you move forward with your channel. Also, you get the benefits of today's hardware wallets where the keys are on machines that don't run web browsers or TCP/IP stacks or something. It's a little bit of a different model but there's some potential there, of course it doesn't work with today's hardware wallets.

OO: The memory is really important too. It has to be beefier than like a ledger hardware wallet.

MC: Well, it might make sense in the context of buying a server and only connecting to the outside world over a serial connection or something. And not running a full Linux stack exposed to every machine on the internet. We can be a lot more careful.

MF: At a high level, if you're using a hardware wallet on the chian you just have to monitor the chian when you're submitting a transaction, when you're a routing node you have to monitor the chain 24/7.

MC: Not necessarily monitoring, but you have to be online to route.

OO: Well, you can have wallets make automated decisions for you. But you have to be careful about this because maybe it can steal all your money. You need verification that it is doing everything right. Definitely tricky to get that secure.

JC: I recommend exchanges to do this at some point. For users, your node becomes a watchtower when you unplug your device or something. There's different models.

MF: Let's talk about the most controversial topic... on-chain fees.

OO: Yeah.

MF: My question is, as a security guarantee the lightning network requires that a channel can be closed at any time. So don't you need a high fee?

OO: That's like a thing for any output in general. You're not going to get an output on the chain that is more costly to move yourself. In lightning breach cases, because you actually have all the money from the counterparty that is cheating you, you can bleed their funds into the fee. So you can say everything they have goes to the miners. But you're right, fees are very important. Right now the lightning fees are pre-committed to, so you're locked into that. In the future, we might have a way where you can add fees to the closure transaction but also update the fees so that you can ensure getting into the chain. If you were offline for a long time you might have a very wrong fee. We can definitely fix this in the future, which would require changes to replace-by-fee in Bitcoin Core.

MC: I blame sdaftuar for changing packet relay.

OO: Is he here?

MC: I don't know. I blame him.

JC: This is also a problem for us, like the force-close-- if you close a channel with $5 and the fee is $2, we have to pay that. So one of the reasons our fees for opening chanenls is so high is because of the fixed fee problem. A dynamic fee would make a lot of sense. Or a static fee and you can just bump it.

OO: lnd will have that capability; say you have a low per byte fee and then later on you can bump that. The damage you can do is that use a fee estimator and that's it; or low-ball RBF and get in. You don't need like 100 satoshi/byte that's wasteful. We can do a lot of work in lnd to be more fee aware and give users control. Maybe you don't really need to close a channel immediately, maybe you can do it in two days with a very low fee.

MC: That's another great thing about lightning. Just in general, because you have a lot of transactions you're making where you don't really care if it confirms soon. You can actually wait a day or longer for it to confirm. So you have that freedom. Right now, taking a transaction in 2 confirmations or something is super risky. In lightning, you can say hey you know what I'm just going to wait a day for this and I'm really sure it won't be reorged out.

MF: What about signature aggregation and potentially opening and closing multiple channels in single transactions. I suppose the concern always is that if lightning was an absolutely amazing success, is that going to price certain use cases out of the lightning network? Or will we need block size increases?

MC: We also just don't know. Lightning clearly improves the ability to fit more transactions on the chain. It improves function and lets certain small payment sgo through given a certain fee rate. But we don't know if lightning results in bitcoin scaling 10x higher or 1000x higher. It's probably not 10000x higher, we don't really know what the numbe ris. We need to deploy it, get users, see what happens. W edon't even know what bitcoin will look like in 5 years.

MF: Bitconner asks, is raven more scalable than lightning?

OO: What? No. They do weird things like storing addresses and using the p2p network for gossip. So I'd say no. They are also much earlier. They have like 40 channels, and we have like 1000s. So very different scale.

MF: Do we have time for questions?



